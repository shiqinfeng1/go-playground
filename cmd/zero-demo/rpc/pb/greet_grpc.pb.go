// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.3
// source: cmd/zero-demo/rpc/greet.proto

// proto 包名

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greet_SendMessage_FullMethodName = "/greet.Greet/SendMessage"
	Greet_GetMessage_FullMethodName  = "/greet.Greet/GetMessage"
	Greet_PushMessage_FullMethodName = "/greet.Greet/PushMessage"
)

// GreetClient is the client API for Greet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetClient interface {
	// 定义客户端流式 rpc
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	// 定义服务端流式 rpc
	GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (Greet_GetMessageClient, error)
	// 定义双向流式 rpc
	PushMessage(ctx context.Context, opts ...grpc.CallOption) (Greet_PushMessageClient, error)
}

type greetClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetClient(cc grpc.ClientConnInterface) GreetClient {
	return &greetClient{cc}
}

func (c *greetClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, Greet_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetClient) GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (Greet_GetMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greet_ServiceDesc.Streams[0], Greet_GetMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetGetMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greet_GetMessageClient interface {
	Recv() (*GetMessageResp, error)
	grpc.ClientStream
}

type greetGetMessageClient struct {
	grpc.ClientStream
}

func (x *greetGetMessageClient) Recv() (*GetMessageResp, error) {
	m := new(GetMessageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetClient) PushMessage(ctx context.Context, opts ...grpc.CallOption) (Greet_PushMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greet_ServiceDesc.Streams[1], Greet_PushMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetPushMessageClient{stream}
	return x, nil
}

type Greet_PushMessageClient interface {
	Send(*SendMessageReq) error
	Recv() (*GetMessageResp, error)
	grpc.ClientStream
}

type greetPushMessageClient struct {
	grpc.ClientStream
}

func (x *greetPushMessageClient) Send(m *SendMessageReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetPushMessageClient) Recv() (*GetMessageResp, error) {
	m := new(GetMessageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServer is the server API for Greet service.
// All implementations must embed UnimplementedGreetServer
// for forward compatibility
type GreetServer interface {
	// 定义客户端流式 rpc
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	// 定义服务端流式 rpc
	GetMessage(*GetMessageReq, Greet_GetMessageServer) error
	// 定义双向流式 rpc
	PushMessage(Greet_PushMessageServer) error
	mustEmbedUnimplementedGreetServer()
}

// UnimplementedGreetServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServer struct {
}

func (UnimplementedGreetServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGreetServer) GetMessage(*GetMessageReq, Greet_GetMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedGreetServer) PushMessage(Greet_PushMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedGreetServer) mustEmbedUnimplementedGreetServer() {}

// UnsafeGreetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServer will
// result in compilation errors.
type UnsafeGreetServer interface {
	mustEmbedUnimplementedGreetServer()
}

func RegisterGreetServer(s grpc.ServiceRegistrar, srv GreetServer) {
	s.RegisterService(&Greet_ServiceDesc, srv)
}

func _Greet_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greet_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greet_GetMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServer).GetMessage(m, &greetGetMessageServer{stream})
}

type Greet_GetMessageServer interface {
	Send(*GetMessageResp) error
	grpc.ServerStream
}

type greetGetMessageServer struct {
	grpc.ServerStream
}

func (x *greetGetMessageServer) Send(m *GetMessageResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Greet_PushMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServer).PushMessage(&greetPushMessageServer{stream})
}

type Greet_PushMessageServer interface {
	Send(*GetMessageResp) error
	Recv() (*SendMessageReq, error)
	grpc.ServerStream
}

type greetPushMessageServer struct {
	grpc.ServerStream
}

func (x *greetPushMessageServer) Send(m *GetMessageResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetPushMessageServer) Recv() (*SendMessageReq, error) {
	m := new(SendMessageReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greet_ServiceDesc is the grpc.ServiceDesc for Greet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.Greet",
	HandlerType: (*GreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Greet_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessage",
			Handler:       _Greet_GetMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushMessage",
			Handler:       _Greet_PushMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/zero-demo/rpc/greet.proto",
}
