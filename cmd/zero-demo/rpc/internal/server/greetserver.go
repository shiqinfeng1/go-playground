// Code generated by goctl. DO NOT EDIT.
// Source: greet.proto

package server

import (
	"context"

	"go-playground/cmd/zero-demo/rpc/internal/logic"
	"go-playground/cmd/zero-demo/rpc/internal/svc"
	"go-playground/cmd/zero-demo/rpc/pb"
)

type GreetServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedGreetServer
}

func NewGreetServer(svcCtx *svc.ServiceContext) *GreetServer {
	return &GreetServer{
		svcCtx: svcCtx,
	}
}

// 定义客户端流式 rpc
func (s *GreetServer) SendMessage(ctx context.Context, in *pb.SendMessageReq) (*pb.SendMessageResp, error) {
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	return l.SendMessage(in)
}

// 定义服务端流式 rpc
func (s *GreetServer) GetMessage(in *pb.GetMessageReq, stream pb.Greet_GetMessageServer) error {
	l := logic.NewGetMessageLogic(stream.Context(), s.svcCtx)
	return l.GetMessage(in, stream)
}

// 定义双向流式 rpc
func (s *GreetServer) PushMessage(stream pb.Greet_PushMessageServer) error {
	l := logic.NewPushMessageLogic(stream.Context(), s.svcCtx)
	return l.PushMessage(stream)
}
