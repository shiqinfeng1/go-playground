// Code generated by goctl. DO NOT EDIT.
// Source: greet.proto

package greet

import (
	"context"

	"go-playground/cmd/zero-demo/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetMessageReq   = pb.GetMessageReq
	GetMessageResp  = pb.GetMessageResp
	SayHelloReq     = pb.SayHelloReq
	SayHelloResp    = pb.SayHelloResp
	SendMessageReq  = pb.SendMessageReq
	SendMessageResp = pb.SendMessageResp

	Greet interface {
		// 定义客户端流式 rpc
		SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
		// 定义服务端流式 rpc
		GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (pb.Greet_GetMessageClient, error)
		// 定义双向流式 rpc
		PushMessage(ctx context.Context, opts ...grpc.CallOption) (pb.Greet_PushMessageClient, error)
	}

	defaultGreet struct {
		cli zrpc.Client
	}
)

func NewGreet(cli zrpc.Client) Greet {
	return &defaultGreet{
		cli: cli,
	}
}

// 定义客户端流式 rpc
func (m *defaultGreet) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	client := pb.NewGreetClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

// 定义服务端流式 rpc
func (m *defaultGreet) GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (pb.Greet_GetMessageClient, error) {
	client := pb.NewGreetClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}

// 定义双向流式 rpc
func (m *defaultGreet) PushMessage(ctx context.Context, opts ...grpc.CallOption) (pb.Greet_PushMessageClient, error) {
	client := pb.NewGreetClient(m.cli.Conn())
	return client.PushMessage(ctx, opts...)
}
